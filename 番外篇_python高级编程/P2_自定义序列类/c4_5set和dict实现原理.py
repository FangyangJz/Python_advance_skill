# dict查找的性能要远远大于list
# 在list中数据量增大, 查找时间会增大
# 在dict中数据量增大, 查找时间并不会增大

# dict中的key, 或者set的值, 必须是可以哈希的,
# 即 如果一个对象是可哈希的,
# 那么在它的生存期内必须不可变(需要一个哈希函数),
# 而且可以和其他对象比较(需要比较方法).
# 比较值相同的对象一定有相同的哈希值

# 1. str, fronzenset, tuple 不能被修改, 都可以作为dict的key
#   我们自己实现的类, 可以重载 __hash__(self), 就可以放进dict/set中使用了

# 2. dict的内存花销大, 但是查询速度快, 
#   自定义的对象或者python内部的对象很多都是用dict包装的

# 3. dict的存储顺序和元素添加顺序有关, 
#   hash collision解决策略导致的, 所以dict是无序的, 但是orderdict有顺序

# 4. 添加数据有可能改变已有数据的顺序,
#   内存不够时, 需要数据搬迁, 导致顺序混乱, 所以, 不用期待数据的顺序
